import asyncio
from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import select
from db import AsyncDB, Habits, Reminders
from datetime import datetime, timedelta
from ...state.tracking_habit import HabitState

router = Router(name=__name__)


async def check_reminders(bot: Bot):
    while True:
        now = datetime.now().replace(second=0, microsecond=0)
        print(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –Ω–∞ {now}")

        async with AsyncDB.get_session() as session:
            reminders = await session.execute(
                select(Reminders).filter(Reminders.reminder_datetime == now)
            )
            reminders = reminders.scalars().all()
            for reminder in reminders:
                print(
                    f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {reminder.user_id} –Ω–∞ {reminder.reminder_datetime}"
                )
                try:
                    await bot.send_message(
                        reminder.user_id,
                        f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder.habit.habit}\n–ß–∞—Å: {reminder.reminder_datetime.strftime('%Y-%m-%d %H:%M')}",
                    )
                    await session.delete(reminder)
                    await session.commit()
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")
                    await session.rollback()

        await asyncio.sleep(60)


@router.message(Command("set_reminders"))
async def set_reminders(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è."""
    user_id = message.from_user.id

    async with AsyncDB.get_session() as session:
        habits = await session.execute(select(Habits).where(Habits.user_id == user_id))
        habits = habits.scalars().all()

    if not habits:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –∑–≤–∏—á–∫–∏. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –∑–≤–∏—á–∫–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /tracking_habit."
        )
        return

    await state.update_data(habits=[{"id": h.id, "name": h.habit} for h in habits])

    habits_text = "\n".join(
        [f"{index + 1}. {habit.habit}" for index, habit in enumerate(habits)]
    )
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–≤–∏—á–∫–∏, –¥–ª—è —è–∫–æ—ó –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n"
        + habits_text
    )
    await state.set_state(HabitState.SetReminder)


@router.message(HabitState.SetReminder)
async def process_set_reminder(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∑–≤–∏—á–∫–∏ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è."""
    user_input = message.text.strip()

    data = await state.get_data()
    habits = data.get("habits", [])

    try:
        habit_index = int(user_input) - 1
        selected_habit = habits[habit_index]
        await state.update_data(habit_id=selected_habit["id"])

        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d %H:%M")
        await message.answer(
            f"–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, {tomorrow}):"
        )
        await state.set_state(HabitState.HabitUpdateFrequency)
    except (ValueError, IndexError):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –∑–≤–∏—á–∫–∏.")


@router.message(HabitState.HabitUpdateFrequency)
async def process_habit_update_frequency(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è."""
    user_input = message.text.strip()

    try:
        reminder_datetime = datetime.strptime(user_input, "%Y-%m-%d %H:%M")
    except ValueError:
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d %H:%M")
        await message.answer(
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, {tomorrow})."
        )
        return

    data = await state.get_data()
    habit_id = data.get("habit_id")

    if not habit_id:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–≤–∏—á–∫—É. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    async with AsyncDB.get_session() as session:
        try:
            reminder = Reminders(
                user_id=message.from_user.id,
                habit_id=habit_id,
                reminder_datetime=reminder_datetime,
            )
            print(f"–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ {reminder_datetime}")
            session.add(reminder)
            await session.commit()

            
        except SQLAlchemyError as e:
            await session.rollback()
            await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ë–î: {e}")

    await state.clear()
